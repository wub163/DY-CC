#include "Encoder.h"
#include <includes.h>
#define Encoder_Val TIM8->CNT

#define ENCODER_TIMER   TIM8  // Encoder unit connected to TIM3
#define ENCODER_PPR           (u16)(400)   // number of pulses per revolution
#define SPEED_BUFFER_SIZE 8

#define COUNTER_RESET   (u16)0
#define ICx_FILTER      (u8) 6 // 6<-> 670nsec

#define TIMx_PRE_EMPTION_PRIORITY 1
#define TIMx_SUB_PRIORITY 0

#define SPEED_SAMPLING_FREQ (u16)(2000/(SPEED_SAMPLING_TIME+1))

void Encoder_Init(void)
{
	
	
		/*定义一个GPIO_InitTypeDef类型的结构体*/
		GPIO_InitTypeDef GPIO_InitStructure;
	  NVIC_InitTypeDef NVIC_InitStructure;
		TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
		TIM_ICInitTypeDef TIM_ICInitStructure;
	
		/*开启Encoder相关的GPIO外设时钟*/
		RCC_AHB1PeriphClockCmd ( ENCODER_A_GPIO_CLK | ENCODER_B_GPIO_CLK, ENABLE); 
		RCC_APB1PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);//TIM8时钟使能 

		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;   
    
    /*设置引脚的输出类型为推挽输出*/
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    
    /*设置引脚为上拉模式*/
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

		/*设置引脚速率为100MHz */   
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; 
	
	
		/*选择要控制的GPIO引脚*/															   
		GPIO_InitStructure.GPIO_Pin = ENCODER_A_PIN;	
		GPIO_Init(ENCODER_A_GPIO_PORT, &GPIO_InitStructure);	
    
    /*选择要控制的GPIO引脚*/															   
		GPIO_InitStructure.GPIO_Pin = ENCODER_B_PIN;	
    GPIO_Init(ENCODER_B_GPIO_PORT, &GPIO_InitStructure);	


  /* Enable the TIM8 Update Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM_Channel_1;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIMx_PRE_EMPTION_PRIORITY;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIMx_SUB_PRIORITY;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  /* Timer configuration in Encoder mode */
  TIM_DeInit(ENCODER_TIMER);
  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
  
  TIM_TimeBaseStructure.TIM_Prescaler = 0x0;  // No prescaling 
  TIM_TimeBaseStructure.TIM_Period = (4*ENCODER_PPR)-1;  
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;   
  TIM_TimeBaseInit(ENCODER_TIMER, &TIM_TimeBaseStructure);
 
  TIM_EncoderInterfaceConfig(ENCODER_TIMER, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
  TIM_ICStructInit(&TIM_ICInitStructure);
  TIM_ICInitStructure.TIM_ICFilter = ICx_FILTER;
  TIM_ICInit(ENCODER_TIMER, &TIM_ICInitStructure);
  
 // Clear all pending interrupts
  TIM_ClearFlag(ENCODER_TIMER, TIM_FLAG_Update);
  TIM_ITConfig(ENCODER_TIMER, TIM_IT_Update, ENABLE);
  //Reset counter
  ENCODER_TIMER->CNT = COUNTER_RESET;
  
//  ENC_Clear_Speed_Buffer();
  
  TIM_Cmd(ENCODER_TIMER, ENABLE);  
	


////		TIM8->CCMR1&=0xFCFC;  // CC1S=1;CC2S=1;
////		TIM8->CCMR1|=1<<0;
////		TIM8->CCMR1|=1<<8;


////		TIM8->CCER&=0xFF55; //CC1P=0;CC2P=0;
////		TIM8->CCER|=0<<0;
////		TIM8->CCER|=0<<4;
////		TIM8->SMCR&=0xFFF8; //SMS=011; 这里需不需要使能呢？
////		TIM8->SMCR|=1<<0;

////		TIM8->CR1|=0<<7;     //ARPE使能 
//////		MY_NVIC_Init(1,3,TIM8_UP_TIM13_IRQn,2);//0 2 2
////		TIM8->CR1|=1<<0;     //使能定时器8
////		TIM8->CNT=1000;

}
